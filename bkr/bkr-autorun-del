#!/bin/sh
# -*- tcl -*-
# The next line is executed by /bin/sh, but not tcl \
exec tclsh "$0" ${1+"$@"}

# Author: jiyin@redhat.com
# Used to delete specified test run.

lappend ::auto_path /usr/local/lib /usr/lib64 /usr/lib
package require getOpt
package require runtestlib
package require tdom
package require sqlite3
package require md5
namespace import ::getOpt::* ::runtestlib::*

# global var
array set Opt {}
array set InvalidOpt {}
set Args [list]
set OptionList {
	help     {arg n	help {#Print this usage}}	h {link help}
	gset     {arg y	help {#global setup options to runtest. e.g. --dbgk --nvr=$NVR}}
	y        {arg n	help {#yes}}
	nonvr    {arg n	help {#no auto added nvr}}
	delpkg   {arg n	help {#delete all tests that along the pkg and all related run info}}
}
set deltype run

proc Usage {progname} {
	puts "Usage: $progname <pkgname> <distro> \[-gset 'xxx'\] \[other options\]"
	puts "Usage: $progname <pkgname> -delpkg"
	getUsage $::OptionList
}

# _parse_ argument
getOptions $OptionList $::argv Opt InvalidOpt Args
puts "Debug: Args{$Args}"
parray InvalidOpt
parray Opt

if [info exist Opt(help)] {
	Usage $argv0
	exit 0
}

if {[llength $Args] < 1} {
	Usage $argv0
	exit 1
}

if [info exist Opt(delpkg)] {
	set deltype pkg
}

if {$deltype == "run" && [llength $Args] < 2} {
	Usage $argv0
	exit 1
}

# Get test package name
set pkgName [lindex $Args 0]

# Get distro and gset info
set Gset {}
set Distro [lindex $Args 1]
if [info exist Opt(gset)] {
	foreach e $Opt(gset) {lappend Gset [regsub {^--} $e {-}]}
}
if {![regexp -- {-nvr=} $Gset] && ![info exists Opt(nonvr)]} {
	set nvr [exec bash -c "vershow ^kernel-\[0-9\] /$Distro$|sed -rn '/^kernel-/{s/\.\[^.\]+\.\[^.\]+$//;p;q}'"]
	if {$nvr == ""} {
		set nvr [exec bash -c "vershow ^kernel-\[0-9\] /[string map {RHEL- {}} $Distro]$|sed -rn '/^kernel-/{s/\.\[^.\]+\.\[^.\]+$//;p;q}'"]
	}
	set Gset [concat "-nvr=$nvr" $Gset]
}
lappend Distro {*}$Gset
if {$Distro == ""} {
	puts "WARN: distro info is nil, something is wrong!"
	Usage $argv0
	exit 1
}

if [info exists Opt(y)] {
	set ans {y}
} else {
	puts "Will Delete $pkgName/$Distro"
	puts -nonewline "***(Are you sure)\[y/n\] "
	flush stdout
	gets stdin ans
}

# __main__
cd [dbroot]
sqlite3 db testrun.db
if {[string match -nocase y* $ans]} {
	if {$deltype == "run"} {
		db transaction {
			db eval "DELETE FROM testrun
				WHERE distro_rgset = '$Distro' and testid in (
					select testid
					from testinfo
					where testrun.testid = testinfo.testid and testinfo.pkgName = '$pkgName'
				)
			"
		}
		#exec "rm -rf log/[string map {{ } _} $Distro]"
	}
	if {$deltype == "pkg"} {
		db transaction {
			db eval "DELETE FROM testrun
				WHERE testid in (
					select testid
					from testinfo
					where testinfo.pkgName = '$pkgName'
				)
			"
			db eval "DELETE FROM testinfo
				WHERE pkgName = '$pkgName'
			"
		}
	}
}

