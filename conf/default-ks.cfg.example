%post --log=/root/my-ks-post.log

rtype=rel-eng
rtype=nightly
downhostname=download.devel.redhat.com
verx=$(rpm -E %rhel)
case $verx in
8|9)
	buildrootUrl=http://$downhostname/rhel-$verx/$rtype/BUILDROOT-$verx/latest-BUILDROOT-$verx-RHEL-$verx/compose/Buildroot/$(arch)/os/
	cat <<-EOF >/etc/yum.repos.d/beaker-buildroot.repo
	[beaker-buildroot]
	name=beaker-buildroot
	baseurl=$buildrootUrl
	enabled=1
	gpgcheck=0
	skip_if_unavailable=1
	EOF
	;;
esac

cat /usr/bin/rhts-environment.sh
cat <<-'EOF' >>/usr/bin/rhts-environment.sh
	# see: https://restraint.readthedocs.io/en/latest/remove_rhts.html#legacy-rhts-task-environment-variables
	# if restraint runs in un-compatable mode, and we still use old ENV name
	if [[ -n "$RSTRNT_JOBID" && -z "$JOBID" ]]; then
		export RHTS_COMPAT=no
		export ARCH="$RSTRNT_OSARCH" \
		DISTRO="$RSTRNT_OSDISTRO" \
		FAMILY="$RSTRNT_OSMAJOR" \
		JOBID="$RSTRNT_JOBID" \
		REBOOTCOUNT="$RSTRNT_REBOOTCOUNT" \
		RECIPESETID="$RSTRNT_RECIPESETID" \
		RECIPEID="$RSTRNT_RECIPEID" \
		RECIPETESTID="$RSTRNT_RECIPEID" \
		SUBMITTER="$RSTRNT_OWNER" \
		TASKID="$RSTRNT_TASKID" \
		TESTID="$RSTRNT_TASKID" \
		TESTNAME="$RSTRNT_TASKNAME" \
		TESTPATH="$RSTRNT_TASKPATH" \
		VARIANT="$RSTRNT_OSVARIANT"
	fi
EOF

cat << 'EOF' > /usr/share/restraint/plugins/task_run.d/27_task_require
#!/bin/bash

. /usr/share/restraint/plugins/helpers
rstrnt_info "*** Running Plugin: $0 @$PWD"

_targetdir=/mnt/tests
_downloaddir=/mnt/download
_logf=/tmp/${0##*/}.log

_install_taskname2url() {
	local _cmd=taskname2url.py
	local _pycurl=python3-pycurl
	[[ $(rpm -E %rhel) = 7 ]] && {
		yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm &>>${_logf}
		_pycurl=python36-pycurl
	}
	yum install -y python3 $_pycurl bzip2 gzip zip xz &>>${_logf}
	command -v $_cmd || {
		_url=http://download.devel.redhat.com/qa/rhts/lookaside/bkr-client-improved/utils/taskname2url.py
		curl -Ls -o /usr/bin/${_cmd} ${_url}
		chmod +x /usr/bin/${_cmd}
	}
}

_get_task_requires() {
	local _fpath=$1
	pushd "$_fpath" &>/dev/null
	{ sed -nr '/^.*"RhtsRequires:\s+library\(([^"]+)\)" .*$/{s@@\1@;s@/@/Library/@;p}' Makefile;
	  awk -F'[=;]' '/^(task|repo)Requires/{for (i=2;i<=NF;i++){if($i ~ "^/") print substr($i,2)}}' metadata;
	} 2>/dev/null | sort -u | xargs
	popd &>/dev/null
}

_get_package_requires() {
	local _fpath=$1 &>/dev/null
	pushd "$_fpath"
	{ sed -nr '/^.*"Requires:\s+([^"()]+)" .*$/{s//\1/;s/ +/\n/;p}' $_fpath/Makefile;
	} 2>/dev/null | sort -u | xargs
	popd &>/dev/null
}

_install_task() {
	local _task=$1 fpath=
	read repo _path <<<"${_task/\// }"
	uri=$(taskname2url.py /$_task $taskOpts $repoOpts)
	[[ -z "$uri" ]] && continue
	read url rpath <<<"${uri/\#/ }"
	repopath=$_targetdir/$repo
	fpath=$repopath/$rpath
	[[ -d $fpath ]] && return 1

	echo -e "\n{debug} install task require: $fpath" >&2
	file=${url##*/}
	filepath=$_downloaddir/repo/$file
	if ! test -f ${filepath}; then
		mkdir -p ${filepath%/*}
		curl -k -Ls ${url} -o ${filepath}
	fi
	if test -f ${filepath}; then
		url_prev=$url
		mkdir -p $repopath
		filetype=$(file -b ${filepath})
		if [[ "$filetype" = Zip* ]]; then
			_fpath=$(unzip $filepath -d $_targetdir | sed -n '/^ *creating: /{s///;p}')
			[[ "$_fpath" != "$fpath" ]] && mv $_fpath $fpath
		else
			case "$filetype" in
				(gzip*) xtype=z;;
				(bzip2*) xtype=j;;
				(XY*) xtype=J;;
				(*) xtype=a;;
			esac
			topdir=$(tar taf ${filepath} | head -1 | sed -e 's@/.*@@')
			tar -C $repopath -${xtype}xf ${filepath} ${topdir}/$rpath --strip-components=1
		fi
	else
		echo "{error} download $url to ${filepath} fail" >&2
		return 2
	fi
	echo -n "$url" >$fpath/.url
	echo "{debug} install pkg dependencies of $fpath" >&2
	pkgs=$(_get_package_requires $fpath)
	[[ -n "$pkgs" ]] && {
		echo "{run} yum install -y $pkgs &>/tmp/${0##*/}.log"
		yum --setopt=strict=0 install -y $pkgs &>/tmp/${0##*/}.log
	}
	echo $fpath
}

_install_task_requires() {
	local _fpath=$1 _task=
	local require_tasks=$(_get_task_requires $_fpath)
	for _task in $require_tasks; do
		__fpath=$(_install_task "$_task")
		[[ -d "$__fpath" ]] && _install_task_requires "$__fpath"
	done
}

if [[ -z "$RSTRNT_NOPLUGINS" ]]; then
	echo "{debug} current dir: $PWD" >&2
	[[ -n "$REPO_URLS" ]] && echo "{debug} task urls: $REPO_URLS" >&2
	[[ -n "$TASK_URIS" ]] && echo "{debug} task urls: $TASK_URIS" >&2

	#if install requires at different repo
	_install_taskname2url

	for repourl in $REPO_URLS; do repoOpts+="-repo=$repourl "; done
	for taskuri in $TASK_URIS; do taskOpts+="-task=$taskuri "; done
	_install_task_requires .

	echo -e "{debug} leaving restraint plugin $0\n" >&2
fi

exec "$@"
EOF
chmod a+x /usr/share/restraint/plugins/task_run.d/27_task_require

%end
