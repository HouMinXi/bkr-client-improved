#!/bin/sh
# -*- tcl -*-
# The next line is executed by /bin/sh, but not tcl \
exec tclsh "$0" ${1+"$@"}

# Author: jiyin@redhat.com
# This is tool to parse job-result.xml to test list
# tdom usage: http://wiki.tcl.tk/8984

lappend ::auto_path $::env(HOME)/lib /usr/local/lib /usr/lib64 /usr/lib
package require tdom
package require getOpt 3.0
namespace import ::getOpt::*

set prog [file tail $argv0]
array set Opt {}
array set InvalidOpt {}
set Args [list]
set ForwardOpt {}
set OptionList {
  "Options:" {
	{help h}   {arg n	help {Print this usage}}
	d          {arg n	help {debug mode} hide yes}
	logs       {arg n	help {get all logs}}
  }
}

# _parse_ argument
getOptions $OptionList $::argv Opt InvalidOpt Args ForwardOpt
if [info exist Opt(d)] {
	puts "\[$prog\]: Arguments:{$Args}"
	puts "\[$prog\]: ForwardOpt{$ForwardOpt}"
	parray InvalidOpt
	parray Opt
}
if {[array size InvalidOpt] > 0} {
	puts stderr "{Error} got invalide option\[s\]:"
	foreach {opt value} [array get InvalidOpt] {
		puts stderr "  $opt -> $value"
	}
	exit 1
}

proc Usage {} {
	puts "Usage0: $::prog \[options\] <J:jobID|RS:recipesetID|R:recipeID|T:taskID>"
	getUsage $::OptionList
}
if [info exist Opt(help)] {
	Usage
	exit 0
}

proc getXML {nodeID} {
	set xml [exec bkr job-results --prettyxml $nodeID]
	regsub {<\?xml .*?\?>} $xml {}
}
proc getDocRoot {nodeID} {
	set doc [dom parse [getXML $nodeID]]
	set root [$doc documentElement]
}

proc parseTaskResult {task} {
	set tname [$task @name]
	set trole [$task @role]
	if {$tname == "/distribution/install"} return
	if {$tname == "/kernel/kdump/setup-nfsdump"} return
	set tresult [$task @result]
	set params {}
	set paramList [$task selectNodes {descendant::param}]
	foreach param $paramList {
		set pname [$param @name]
		if {$pname == "DISTRO_BUILD"} continue
		if {$pname == "TestID"} continue
		append tname " $pname=[$param @value]"
	}
	append tname " @$trole"

	#get subtest result
	set task_results [$task selectNodes results]
	set subresult [list]
	if {$task_results != ""} {
		foreach subres [$task_results childNodes] {
			set _res [$subres @result]
			set _path [$subres @path]
			lappend subresult "$_res $_path"
		}
		lappend tresult $subresult
	}

	lappend ::Test($tname) $tresult
}

proc showTestResult {tests} {
	array set testarr $tests
	foreach {Name Res} [array get testarr] {
		set i 0
		foreach reciperes $Res {
			lassign $reciperes res subres
			puts "    $res {$Name}"
			foreach r $subres {
				puts "        $r"
			}
			puts ""
			incr i
		}
	}
}

proc parseRecipeResult {recipe} {
	set ::RecipeID R:[$recipe @id]
	set arch [$recipe @arch]
	set distro [$recipe @distro]
	set family [$recipe @family]
	set ::System {}
	set ::GSet {}
	if [$recipe hasAttribute system] {
		set ::System [$recipe @system]
	}
	set gset "$distro $arch"
	lappend ::GSet "$gset"
	set taskList [$recipe selectNodes {descendant::task}]

	unset ::Test
	foreach task $taskList {
		parseTaskResult $task
	}

	puts stderr "  recipe: $::RecipeID $::GSet @$::System"
	if [info exist ::Opt(logs)] {
		set recipelog [exec bash -c "bkr job-logs $::RecipeID | sed 's/^/    /'"]
		puts "$recipelog\n"
	} else {
		showTestResult [array get ::Test]
	}
}

proc parseRecipesetResult {recipeset} {
	set ::RecipeSetID RS:[$recipeset @id]
	set recipeList [$recipeset selectNodes {descendant::recipe}]
	set hostN [llength $recipeList]
	set taskList [$recipeset selectNodes {descendant::task}]
	foreach task $taskList {
		set tname [$task @name]
		if {$tname == "/kernel/kdump/setup-nfsdump"} {
			if {"kdump" ni $::GSet} { lappend ::GSet kdump }
		}
	}

	puts stderr "recipeSet: $::JobID->$::RecipeSetID"
	foreach recipe $recipeList {
		parseRecipeResult $recipe
	}
}

proc parseJobResult {docRoot} {
	set recipesetList [$docRoot selectNodes {descendant::recipeSet}]
	foreach recipeset $recipesetList {
		parseRecipesetResult $recipeset
	}
}

#_main_
#Update test status and result
foreach nodeID $Args {
	set JobID {J:0}
	set RecipeSetID {RS:0}
	set RecipeID {R:0}
	set TaskID {T:0}
	set GSet {}
	set System {}
	array set Test {}

	switch -glob -- $nodeID {
		"J:*" {
			set JobID $nodeID
			parseJobResult [getDocRoot $nodeID]
		}
		"RS:*" {
			set RecipeSetID $nodeID
			parseRecipesetResult [getDocRoot $nodeID]
		}
		"R:*" {
			set RecipeID $nodeID
			parseRecipeResult [getDocRoot $nodeID]
		}
		"T:*" {
			set TaskID $nodeID
			parseTaskResult [getDocRoot $nodeID]
			showTestResult [array get ::Test]
		}
	}
}

