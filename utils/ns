#!/bin/bash
# author: yin-jianhong@163.com
# version: v0.2
# dependency: systemd-nspawn
# used to create light container/ns for nfs/cifs test on RHEL/CentOS 7 or later

NSHome=/opt/NS

[[ $(id -u) != 0 ]] && {
	echo -e "{Warn} $0 need root permission, try:\n  sudo $0 ..." >&2
	exec sudo $0 "$@"
}

which screen &>/dev/null || dep=screen
which tmux &>/dev/null || dep+=\ tmux
which iptables &>/dev/null || dep+=\ iptables
which rsync &>/dev/null || dep+=\ rsync
which systemd-nspawn &>/dev/null || dep+=\ systemd-container
[[ -n "$dep" ]] && {
	echo -e "{Info} install dependences ..."
	yum install -y $dep >&2
}

Usage() {
	cat <<-EOF
	Usage:
	  $0 <-n nsname> [options] [exec -- cmdline | ps | del | install pkgs | reinstall pkgs]
	  $0 ls

	Options:
	  -h, --help           ; show this help info
	  -n {nsname}          ; ns(name space) name
	  -p {pkgs}            ; packages you want in ns(name space)
	  -d                   ; debug mode
	  --veth-ip {ip1,ip2}  ; ip address pair for veth pair; ip1 for host side and ip2 for ns side
	  --macvlan-ip {ip1[,ip2...]} ; ip address[es] for ns macvlan if[s]; all for ns side
	  --bind {src[:dst]}   ; see systemd-nspawn --bind
	  --robind {src[:dst]} ; see systemd-nspawn --bind-ro
	  --ostree={yes|no}    ; use host os tree instead creating full seperated os tree, default is no
	  --vol, --volatile {yes|no}  ; see systemd-nspawn --volatile. default is no
	  --clone {ns}         ; clone from ns

	Examples create ns by using host fs tree(/usr,/etc,/var. need --ostree=yes):
	  # create a ns ns1 with veth net config: host side ip 192.168.1.1, ns side ip 192.168.1.2
	  # and two extra macvlan netif: ip addres are 192.168.254.11 and 192.168.253.11
	  $0 -n ns1 --veth-ip 192.168.1.1,192.168.1.2 --macvlan-ip 192.168.254.11,192.168.253.11 --ostree=yes
	  # note: https://lists.freedesktop.org/archives/systemd-devel/2018-September/041327.html

	Examples create ns by using own fs tree:
	  # same as example ns1, but use a it's own fs tree instead reuse host os tree
	  #  so you can do anything in this ns, and don't worry about any impact on the host
	  $0 -n ns2 --veth-ip 192.168.2.1,192.168.2.2 --macvlan-ip 192.168.254.12,192.168.253.12 -p "nfs-utils"
	  $0 -n ns3 --veth-ip 192.168.3.1,192.168.3.2 --macvlan-ip 192.168.254.13,192.168.253.13 --clone ns2

	Examples sub-command:
	  $0 ls                                # list all ns
	  $0 ps ns2                            # show ps tree of ns2
	  $0 del ns2                           # delete/remove ns2
	  $0 install ns2 cifs-utils            # install cifs-utils in ns2

	  $0 exec ns2 ip addr show             # exec command in ns2
	  $0 exec ns2 -- ls -l /               # exec command in ns2

	  systemctl start nfs-server
	  exportfs -o ro,no_root_squash "*:/usr/share"
	  $0 exec ns2 -- mkdir -p /mnt/nfs              # exec command in ns2
	  $0 exec ns2 -- showmount -e 192.168.2.1       # exec command in ns2
	  $0 exec ns2 -- mount 192.168.2.1:/ /mnt/nfs   # exec command in ns2
	  $0 exec ns2 -- showmount -e 192.168.254.1     # exec command in ns2
	  $0 exec ns2 -- mount 192.168.254.1:/ /mnt/nfs # exec command in ns2

	EOF
}

is_valid_ip() {
    local  ip=$1
    local  stat=1

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        ip=(${ip//./ })
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}

ns_init_pid() {
	local nsdir=$1
	local ppid initpid

	ppid=$(pgrep -f "^systemd-nspawn .*$nsdir$") || return 1
	initpid=$(pgrep -f ^/usr/lib/systemd/systemd -P "$ppid") || return 1
	echo $initpid
}

ns_pstree() {
	local nsdir=$NSHome/$1
	local tree=$(ps axf | sed -rn -e 's/^(( *[^ ]+){4} )(.*)$/\3 # \1/' -e "/^( ._ )?systemd-nspawn .*${nsdir//\//\\/}/,/^( ._ )?[^ ]/p" | sed '/^[^ ]/d')
	[[ "$tree" = ' \_ '* ]] && {
		tree=$(sed 's/^....//' <<<"$tree")
	}
	echo "$tree"
}

_nsexec() {
	local initpid=$1
	shift
	nsenter --target "$initpid" --mount --uts --ipc --net --pid "$@"
}

nsexec() {
	local nsdir=$NSHome/$1
	shift
	local initpid=$(ns_init_pid $nsdir)
	_nsexec "$initpid" "$@"
}

getDefaultNic() {
	ip route | awk '/default/{match($0,"dev ([^ ]+)",M); print M[1]; exit}'
}

OSTREE=no
VOLATILE=no
NET_MACVLAN_OPTS=
BIND_OPTS=
NS_VETH_IP=
NS_MACVLAN_IPS=
HOST_VETH_IP=
InitPid=
PKGS="systemd iproute iputils "

# command line parse
_at=`getopt -o hn:p:d \
	--long help \
	--long veth-ip: \
	--long macvlan-ip: \
	--long bind: \
	--long robind: \
	--long ostree: \
	--long volatile: --long vol: \
	--long clone: \
    -a -n "$0" -- "$@"`
eval set -- "$_at"
while true; do
	case "$1" in
	-h|--help) Usage; shift 1; exit 0;;
	-n) NS="$2"; shift 2;;
	-p) PKGS+="$2"; shift 2;;
	-d) DEBUG=yes; shift 1;;
	--veth-ip) read HOST_VETH_IP NS_VETH_IP <<<"${2//,/ }"; shift 2;;
	--macvlan-ip) NS_MACVLAN_IPS="${2//,/ }"; shift 2;;
	--bind) BIND_OPTS+="--bind=$2 "; shift 2;;
	--robind) BIND_OPTS+="--bind-ro=$2 "; shift 2;;
	--ostree) OSTREE=$2; shift 2;;
	--volatile|--vol) VOLATILE=$2; shift 2;;
	--clone) CLONE=$2; shift 2;;
	--) shift; break;;
	esac
done

# __main__
subcmd=$1
case $subcmd in
exec|exe|ex|e) shift
	[[ -z "$NS" ]] && { NS=$1; shift; }
	[[ -z "$NS" ]] && { Usage >&2; exit 1; }
	nsexec $NS "$@"
	exit $?;;
install|ins*) shift
	[[ -z "$NS" ]] && { NS=$1; shift; }
	[[ -z "$NS" ]] && { Usage >&2; exit 1; }
	NSdir=$NSHome/$NS
	yum -y --nogpg --installroot=$NSdir install "$@"
	yum -y --nogpg --installroot=$NSdir clean all 2>/dev/null
	rm -rf $NSdir/var/cache/yum/*
	exit $?;;
reinstall|reins*) shift
	[[ -z "$NS" ]] && { NS=$1; shift; }
	[[ -z "$NS" ]] && { Usage >&2; exit 1; }
	NSdir=$NSHome/$NS
	yum -y --nogpg --installroot=$NSdir reinstall "$@"
	yum -y --nogpg --installroot=$NSdir clean all 2>/dev/null
	rm -rf $NSdir/var/cache/yum/*
	exit $?;;
ps) shift
	[[ -z "$NS" ]] && { NS=$1; shift; }
	[[ -z "$NS" ]] && { Usage >&2; exit 1; }
	ns_pstree $NS
	exit $?;;
del*|del|de|d) shift
	[[ -z "$NS" ]] && { NS=$1; shift; }
	[[ -z "$NS" ]] && { Usage >&2; exit 1; }
	systemd-run -M $NS "poweroff"
	ns_pstree $NS | awk 'NF > 4 {print $(NF-3)}' | xargs kill 2>/dev/null
	sleep 1
	ns_pstree $NS | awk 'NF > 4 {print $(NF-3)}' | xargs kill -9 2>/dev/null
	ip link del ve-$NS 2>/dev/null
	macvlan4ns=${NS}-
	for dev in $(ip a s | awk -F'[: @]+' -v pre=${macvlan4ns} '/^[0-9]+:/ {if ($2 ~ "^" pre "[0-9]*$") print $2}'); do
		ip link del "$dev" 2>/dev/null
	done
	exit $?;;
ls) shift
	machinectl -l
	exit $?;;
creat*) shift
	;;
esac

[[ -z "$NS" ]] && { Usage >&2; exit 1; }

#remove existed one
$0 del "$NS" 2>/dev/null

NSdir=$NSHome/$NS

echo -e "\n{INFO} creating macvlan if for NS ..."
macvlan4ns=${NS}-
loop=0
for addr in $NS_MACVLAN_IPS; do
	is_valid_ip "$addr" || { echo -e "\n{WARN} '$addr' is not a valid address"|grep --color=always . >&2; continue; }
	ifname=${macvlan4ns}$((loop++))
	ip link add link $(getDefaultNic) name ${ifname} type macvlan mode bridge
	#ip link set dev $ifname up
	NET_MACVLAN_OPTS+="--network-macvlan=$ifname "
done

echo -e "\n{INFO} creating fs tree for NS $NSdir ..."
mkdir -p $NSdir
if [[ "$OSTREE" = yes ]]; then
	trap 'echo -e "\n{Note} can not abort now"' 1 2 15
	mount / $NSdir/ -oro,bind
	BIND_OPTS="--bind=/etc --bind-ro=/var"
else
	if [[ -n "$CLONE" && -d "$NSHome/$CLONE" ]]; then
		rsync -a --info=progress2 $NSHome/$CLONE/  $NSdir/.
	fi

	if ! rpm --root $NSdir -q systemd; then
		yum -y --nogpg --installroot=$NSdir install $PKGS
		\cp -rf /etc/yum.repos.d $NSdir/etc/.
		\cp /etc/{passwd,group,shadow} $NSdir/etc/.
		yum -y --nogpg --installroot=$NSdir clean all 2>/dev/null
		rm -rf $NSdir/var/cache/yum/*
	fi
fi

echo -e "\n{INFO} creating NS $NS ..."
CMD="systemd-nspawn $BIND_OPTS --volatile=$VOLATILE -n $NET_MACVLAN_OPTS -bD $NSdir"
if [[ "$DEBUG" = yes ]]; then
	$CMD
else
	if which screen &>/dev/null; then
		screen -dm -S $NS -- $CMD
	else
		tmux new -s $NS -d "$CMD"
	fi
fi

echo -e "\n{INFO} waiting NS $NSdir start ..."
sleep 1
for ((i=0; i<4; i++)); do InitPid=$(ns_init_pid $NSdir) && break; sleep 1; done
[[ -z "$InitPid" ]] && {
	$CMD
	echo -e "\n{Error} something is wrong, exit ."
	[[ "$OSTREE" = yes ]] && { umount $NSdir; }
	$0 del "$NS" 2>/dev/null
	exit 1
}

echo -e "\n{INFO} NS info"
machinectl -l
ns_pstree $NS
[[ "$OSTREE" = yes ]] && {
	umount $NSdir
	trap - 1 2 15
}

# post setup
macvlan4host=macvlan-host
hostvethif=ve-$NS
is_valid_ip $HOST_VETH_IP || { HOST_VETH_IP=; echo -e "\n{WARN} '$HOST_VETH_IP' is not a valid address"|grep --color=always . >&2; }
is_valid_ip $NS_VETH_IP || { NS_VETH_IP=; echo -e "\n{WARN} '$NS_VETH_IP' is not a valid address"|grep --color=always . >&2; }
if [[ -n "$HOST_VETH_IP" && -n "$NS_VETH_IP" ]]; then
	echo -e "\n{INFO} setup veth host side $hostvethif $HOST_VETH_IP"
	ip addr add $HOST_VETH_IP/24 dev $hostvethif
	ip link set dev $hostvethif up
	ip a s $hostvethif

	vifidx=$(ip a s $hostvethif|sed -nr -e '/.*@if([0-9]+): .*/{s//\1/;p}')
	nsvethif=$(_nsexec "$InitPid" ip a s | awk -F[@:\ ]+ '/^'$vifidx':/{print $2}')
	echo -e "\n{INFO} setup veth ns side $nsvethif $NS_VETH_IP"
	_nsexec "$InitPid" ip addr add $NS_VETH_IP/24 dev $nsvethif
	_nsexec "$InitPid" ip link set dev $nsvethif up
	_nsexec "$InitPid" ip a s $nsvethif

	#add default route
	_nsexec "$InitPid" ip route add default via $HOST_VETH_IP dev $nsvethif

	#enable NAT
	sysctl -w net.ipv4.conf.all.forwarding=1
	iptables -A POSTROUTING -s ${HOST_VETH_IP%.*}.0/24 -j MASQUERADE -t nat
else
	:
fi

echo -e "\n{INFO} => setup macvlan ns side:"
loop=0
for addr in $NS_MACVLAN_IPS; do
	is_valid_ip "$addr" || { echo -e "\n{WARN} '$addr' is not a valid address"|grep --color=always . >&2; continue; }
	nsifname=mv-${macvlan4ns}$((loop++))
	echo -e "\n{INFO} setup macvlan if $nsifname $addr"
	_nsexec "$InitPid" ip link set dev $nsifname up
	_nsexec "$InitPid" ip addr add $addr/24 dev $nsifname
	_nsexec "$InitPid" ip a s $nsifname
done

HOST_MACVLAN_IP=192.168.254.1
echo -e "\n{INFO} setup default macvlan host side $macvlan4host $HOST_MACVLAN_IP"
ip link show $macvlan4host &>/dev/null ||
	ip link add link $(getDefaultNic) name $macvlan4host type macvlan mode bridge
ip addr add $HOST_MACVLAN_IP/24 dev $macvlan4host
ip link set dev $macvlan4host up
ip a s $macvlan4host

[[ -n "$HOST_VETH_IP" && -n "$NS_VETH_IP" ]] && {
	echo -e "\n{INFO} ping veth nic $NS_VETH_IP ($hostvethif -> $nsvethif)"
	ping -c 2 $NS_VETH_IP
}
