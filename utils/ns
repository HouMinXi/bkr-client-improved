#!/bin/bash
# author: yin-jianhong@163.com
# version: draft
# dependency: systemd-nspawn
# used to create light container/ns for nfs/cifs test on RHEL/CentOS 7 or later

NSHome=~/NS
NSHome=/var/lib/machines

[[ $(id -u) != 0 ]] && {
	echo -e "{Warn} $0 need root permission, try:\n  sudo $0 ..." >&2
	exec sudo $0 "$@"
}

which screen &>/dev/null || dep=screen
which tmux &>/dev/null || dep=\ tmux
which systemd-nspawn &>/dev/null || dep+=\ systemd-container
[[ -n "$dep" ]] && {
	echo -e "{Info} install dependences ..."
	yum install -y $dep >&2
}

Usage() {
	cat <<-EOF
	Usage:
	  $0 <-n nsname> [options] [exec -- cmdline | ps | del | install pkgs]
	  $0 ls

	Options:
	  -h, --help          ; show this help info
	  -n {nsname}         ; ns(name space) name
	  -p {pkgs}           ; packages you want in ns(name space)
	  --veth-ip {ip1,ip2} ; ip address pair for veth pair
	  --macvlan-ip {ip1[,ip2...]} ; ip address[es] for ns macvlan if[s]

	Examples:
	  $0 -n nfsserv -p "nfs-utils iproute" --veth-ip 192.168.1.1,192.168.1.2 --macvlan-ip 192.168.254.11 # create ns as nfs server
	  $0 -n nfsc -p "nfs-utils iproute" --veth-ip 192.168.2.1,192.168.2.2 --macvlan-ip 192.168.254.21 # create ns as nfs client
	  $0 -n nfsc exec -- ls -l /               # exec command in ns
	  $0 -n nfsc exec ip addr show             # exec command in ns
	  $0 -n nfsc exec mkdir /mnt/nfs           # exec command in ns
	  $0 -n nfsc exec mount 192.168.2.1:/ /mnt/nfs    # exec command in ns
	  $0 -n nfsc exec mount 192.168.254.1:/ /mnt/nfs  # exec command in ns
	  $0 -n nfsc ps  # show ps tree of ns
	  $0 -n nfsc del # delete/remove ns
	  $0 ls          # list all ns

	  $0 -n nfsc install cifs-utils # install cifs-utils in ns
	EOF
}

ns_init_pid() {
	local nsdir=$1
	local ppid initpid

	ppid=$(pgrep -f "^systemd-nspawn.*$nsdir$") || return 1
	initpid=$(pgrep -f ^/usr/lib/systemd/systemd -P "$ppid") || return 1
	echo $initpid
}

ns_pstree() {
	local nsdir=$NSHome/$1
	local tree=$(ps axf | sed -rn -e 's/^(( *[^ ]+){4} )(.*)$/\3 \t\t\t \1/' -e "/^( ._ )?systemd-nspawn -n.*${nsdir//\//\\/}/,/^( ._ )?[^ ]/p" | sed \$d)
	[[ "$tree" = ' \_ '* ]] && {
		tree=$(sed 's/^....//' <<<"$tree")
	}
	echo "$tree"
}

_nsexec() {
	local initpid=$1
	shift
	nsenter --target "$initpid" --mount --uts --ipc --net --pid "$@"
}

nsexec() {
	local nsdir=$NSHome/$1
	shift
	local initpid=$(ns_init_pid $nsdir)
	_nsexec "$initpid" "$@"
}

getDefaultNic() {
	ip route | awk '/default/{match($0,"dev ([^ ]+)",M); print M[1]; exit}'
}

# command line parse
_at=`getopt -o hn:p: \
	--long help \
	--long veth-ip: \
	--long macvlan-ip: \
    -a -n "$0" -- "$@"`
eval set -- "$_at"
while true; do
	case "$1" in
	-h|--help) Usage; shift 1; exit 0;;
	-n) NS="$2"; shift 2;;
	-p) PKGS="$2"; shift 2;;
	--veth-ip) read HOST_VETH_IP NS_VETH_IP <<<"${2//,/ }"; shift 2;;
	--macvlan-ip) NS_MACVLAN_IPS="${2//,/ }"; shift 2;;
	--) shift; break;;
	esac
done

# __main__
subcmd=$1
case $subcmd in
exec|exe|ex|e) shift
	[[ -z "$NS" ]] && { NS=$1; shift; }
	[[ -z "$NS" ]] && { Usage >&2; exit 1; }
	nsexec $NS "$@"
	exit $?;;
install|ins*) shift
	[[ -z "$NS" ]] && { NS=$1; shift; }
	[[ -z "$NS" ]] && { Usage >&2; exit 1; }
	yum -y --nogpg --installroot=$NSHome/$NS install "$@"
	exit $?;;
ps) shift
	[[ -z "$NS" ]] && { NS=$1; shift; }
	[[ -z "$NS" ]] && { Usage >&2; exit 1; }
	ns_pstree $NS
	exit $?;;
del*|del|de|d) shift
	[[ -z "$NS" ]] && { NS=$1; shift; }
	[[ -z "$NS" ]] && { Usage >&2; exit 1; }
	systemd-run -M $NS "poweroff"
	ns_pstree $NS | awk '{print $(NF-3)}' | xargs kill 2>/dev/null
	ip link del ve-$NS 2>/dev/null
	macvlan4ns=$NS
	for dev in $(ip a s | awk -F'[: @]+' -v pre=$macvlan4ns '/^[0-9]+:/ {if ($2 ~ "^" pre "[0-9]*$") print $2}'); do
		ip link del "$dev" 2>/dev/null
	done
	exit $?;;
ls) shift
	machinectl -l
	exit $?;;
creat*) shift
	;;
esac

[[ -z "$NS" ]] && { Usage >&2; exit 1; }

NS_VETH_IP=${NS_VETH_IP}
NS_MACVLAN_IPS=${NS_MACVLAN_IPS}
HOST_VETH_IP=${HOST_VETH_IP}
macvlan4host=macvlan-host
macvlan4ns=$NS
NSdir=$NSHome/$NS
InitPid=
PKGS=${PKGS:-iputils iproute nfs-utils}

echo -e "\n{INFO} creating NS directory $NSdir ..."
mkdir -p $NSdir/etc
\cp -rf /etc/yum.repos.d $NSdir/etc/.
yum -y --nogpg --installroot=$NSdir install iputils $PKGS
yum -y --nogpg --installroot=$NSdir clean all 2>/dev/null
\cp /etc/{passwd,group,shadow} $NSdir/etc/.
rm -rf $NSdir/var/cache/yum/*

hostvethif=ve-$NS
ip link del $hostvethif 2>/dev/null

echo -e "\n{INFO} creating macvlan if for NS ..."
NET_MACVLAN_OPTS=
loop=0
for addr in $NS_MACVLAN_IPS; do
	ifname=${macvlan4ns}$((loop++))
	ip link add link $(getDefaultNic) name ${ifname} type macvlan mode bridge
	NET_MACVLAN_OPTS+="--network-macvlan=$ifname "
done

echo -e "\n{INFO} creating NS $NS ..."
if which screen &>/dev/null; then
	screen -dm -S $NS systemd-nspawn -n $NET_MACVLAN_OPTS -bD $NSdir
else
	tmux new -s $NS -d "systemd-nspawn -n $NET_MACVLAN_OPTS -bD $NSdir"
fi

echo -e "\n{INFO} waiting NS $NSdir start ..."
sleep 1
for ((i=0; i<8; i++)); do InitPid=$(ns_init_pid $NSdir) && break; sleep 1; done
[[ -z "$InitPid" ]] && {
	echo -e "\n{Error} something is wrong, exit ."
	exit 1
}

echo -e "\n{INFO} NS info"
machinectl -l
ns_pstree $NSdir

if [[ -n "$HOST_VETH_IP" && -n "$NS_VETH_IP" ]]; then
	echo -e "\n{INFO} setup veth host side $hostvethif $HOST_VETH_IP"
	ip addr add $HOST_VETH_IP/24 dev $hostvethif
	ip link set dev $hostvethif up
	ip a s $hostvethif

	vifidx=$(ip a s $hostvethif|sed -nr -e '/.*@if([0-9]+): .*/{s//\1/;p}')
	nsvethif=$(_nsexec "$InitPid" ip a s | awk -F[@:\ ]+ '/^'$vifidx':/{print $2}')
	echo -e "\n{INFO} setup veth ns side $nsvethif $NS_VETH_IP"
	_nsexec "$InitPid" ip addr add $NS_VETH_IP/24 dev $nsvethif
	_nsexec "$InitPid" ip link set dev $nsvethif up
	_nsexec "$InitPid" ip a s $nsvethif

	#add default route
	_nsexec "$InitPid" ip route add default via $HOST_VETH_IP dev $nsvethif

	#enable NAT
	sysctl -w net.ipv4.conf.all.forwarding=1
	iptables -A POSTROUTING -s ${HOST_VETH_IP%.*}.0/24 -j MASQUERADE -t nat
else
	:
fi

echo -e "\n{INFO} => setup macvlan ns side:"
loop=0
for addr in $NS_MACVLAN_IPS; do
	nsifname=mv-${macvlan4ns}$((loop++))
	echo -e "\n{INFO} setup macvlan if $nsifname $addr"
	_nsexec "$InitPid" ip addr add $addr/24 dev $nsifname
	_nsexec "$InitPid" ip link set dev $nsifname up
	_nsexec "$InitPid" ip a s $nsifname
done

HOST_MACVLAN_IP=192.168.254.1
echo -e "\n{INFO} setup macvlan host side $macvlan4host $HOST_MACVLAN_IP"
ip link show $macvlan4host &>/dev/null ||
	ip link add link $(getDefaultNic) name $macvlan4host type macvlan mode bridge
ip addr add $HOST_MACVLAN_IP/24 dev $macvlan4host
ip link set dev $macvlan4host up
ip a s $macvlan4host

[[ -n "$HOST_VETH_IP" && -n "$NS_VETH_IP" ]] && {
	echo -e "\n{INFO} ping veth nic $NS_VETH_IP ($hostvethif -> $nsvethif)"
	ping -c 2 $NS_VETH_IP
}

loop=0
for addr in $NS_MACVLAN_IPS; do
	nsifname=mv-${macvlan4ns}$((loop++))
	echo -e "\n{INFO} ping macvlan nic $addr ($macvlan4host -> $nsifname)"
	while ! ping -c 2 $addr; do sleep 1; done
done
