#!/bin/bash
#author jiyin@redhat.com

dbRoot=/var/cache/distroInfoDB
rpmdb=rpmsdata

Pkg=
Arch=x86_64
Variant=Workstation
lockf=/tmp/distroDB.w.lock
trap "sigproc" SIGINT SIGTERM SIGHUP SIGQUIT
sigproc() {
	rm -f $lockf
	exit
}

Usage() {
	echo "Usage: $0 [--updatedb] <-p pkgName|pattern> [-d distroName|pattern] [-a <arch>|-v <variant>]" >&2
}
Debug() {
	[[ -n "$debug" ]] && { echo "{debug} $@" >&2; }
}

_at=`getopt -o hunp:d:a:v:lD \
	--long help \
	--long updatedb \
    -n 'vershow' -- "$@"`
eval set -- "$_at"
while true; do
	case "$1" in
	-h|--help)      Usage; shift 1; exit 0;;
	-u|--updatedb)  [ -z "$Update" ] && Update=yes || Update=YES; shift 1;;
	-n) nocolor=yes; shift 1;;
	-p) Pkg=$2; shift 2;;
	-d) Distro=$2; shift 2;;
	-a) Arch=$2; shift 2;;
	-v) Variant=$2; shift 2;;
	-l) long=yes; shift 1;;
	-D) debug=yes; shift 1;;
	--) shift; break;;
	esac
done

Pkg=${Pkg:-$1}
Pkg=${Pkg:-^kernel-[0-9]}
Pkg=".*${Pkg}.*"
[[ ${Pkg:0:3} = '.*^' ]] && Pkg="${Pkg:3}"
[[ ${Pkg: -3} = '$.*' ]] && Pkg="${Pkg:0:-3}"
Distro=${Distro:-$2}
Distro=${Distro#/}
[ -z "${Pkg}" -a "$Update" != yes -a "$Update" != YES ] && {
	Usage
	exit 1
}
Debug "pkg:($Pkg) distro:($Distro) arch:($Arch) variant:($Variant)"

UpdateDB() {
	local deepup=

	[ "$1" = YES ] && deepup=1
	cd $dbRoot
	rm -f .[Cc]url* #remove old version db files

	rpm -q procmail >/dev/null || yum install -y procmail &>/dev/null
	lockfile /tmp/distroDB.w.lock || return 0

	#Update distro list
	for family in 8 7 6 5; do
		distro-list.sh -f $family -t all
	done >distro.list.tmp
	if [ ! -f distro.list ]; then
		touch distro.list
	fi

	diff -pNu distro.list distro.list.tmp >distro.list.diff
	\cp distro.list.tmp distro.list
	sed -n '/^+[^+]/{s/^+//; p}' distro.list.diff >distro.list.up
	[ -n "$deepup" ] && \cp distro.list distro.list.up

	#Update pkg list
	while read distro; do
		urls=$(bkr distro-trees-list --limit=1 --name "$distro"  |
			awk '/https?:/ {
				if ($3 ~ "/compose/") {
					sub("/compose/.*$", "/compose/metadata", $3)
				} else if ($3 ~ "/released/") {
					sub("([^/]+/){3}$", "metadata", $3)
				}
				print $3
			}' | sort -u)
		cachefile=$rpmdb/${distro// /_}.json.gz
		urlsfile=$rpmdb/${distro// /_}.urls

		[[ -f $cachefile ]] && continue

		for url in $urls; do
			if curl -sf -k -L -u: $url/rpms.json > >(gzip >$cachefile) ||
				curl -sf -k -L -u: $url/rpm-manifest.json > >(gzip >$cachefile); then
				echo "$urls" >$urlsfile
				break
			else
				echo "[warn] get rpm json file of '$distro' fail: $url" >&2
				rm -f $cachefile
			fi
		done
	done < distro.list.up
	rm -f /tmp/distroDB.w.lock
}

case "$Arch" in
	x86_64|i386|ppc64le|ppc64|s390x|aarch64) :;;
	*) echo "{warn} unknow arch '$Arch'" >&2;;
esac

if [ "$Update" = yes -o "$Update" = YES ]; then 
	[ `id -u` != 0 ] && {
		echo "{Warn} Update database need root. try 'sudo /usr/local/bin/vershow --updatedb'" >&2
		exit 1
	}
	egrep -q "/usr/local/bin/vershow" /etc/crontab || echo "  10 05 *  *  * root       /usr/local/bin/vershow -uu;" >>/etc/crontab
	mkdir -p $dbRoot/$rpmdb
	echo "{Info} $(test $Update = YES && echo Deep\ )Updating distro database..."
	UpdateDB $Update
else
	[ ! -d $dbRoot -o ! -f $dbRoot/distro.list ] && {
		echo "{Warn} distro database is nil. try 'sudo /usr/local/bin/vershow --updatedb' to create database first" >&2
		exit 1
	}
fi

# do search
cd $dbRoot
mylist=$(egrep -i -- "${Distro}" distro.list)
while read distro; do
	cachefile=$rpmdb/${distro// /_}.json.gz
	[ -f $cachefile ] || continue

	variant=$Variant
	[[ $distro = RHEL-8* ]] && {
		case $variant in Workstation|Client|Server|ComputeNode) variant=;; esac
	}

	Debug "distro:($distro) pkg:($Pkg) arch:($Arch) variant:($variant) @$cachefile"
	#result=$(zcat $cachefile |
	#	jq -r '.payload | with_entries(if .key == "manifest" then .key = "rpms" else . end)|.rpms|'".${variant:-[]}|.$Arch|.[]|.[].path" |
	#	grep -v source/tree |
	#	egrep "$Pkg")
	result=$(egrep -o -i "${variant:-[^\"]+}/($Arch)/os/Packages/(${Pkg})\.[0-9a-z_-]+\.rpm" < <(zcat $cachefile))
	[ $? = 0 ] && {
		[[ -z "$nocolor" ]] && echo -e "=> \033[1;34m$distro\033[0m" || echo -n "$distro -> "
		if [[ $long = yes ]]; then
			echo "$result"|sed -e 's/^/    /'
		else
			echo "$result"|sed -e 's;.*/;;'
		fi
	}
done <<<"$mylist"

