#!/bin/bash
#author jiyin@redhat.com

Usage() {
	echo "Usage: $0 [--updatedb] <pkgName|pattern> [distroName|pattern]" >&2
}
_at=`getopt -o hun \
	--long help \
	--long updatedb \
    -n 'vershow' -- "$@"`
eval set -- "$_at"
while true; do
	case "$1" in
	-h|--help)      Usage; shift 1; exit 0;;
	-u|--updatedb)  [ -z "$Update" ] && Update=yes || Update=YES; shift 1;;
	-n) nocolor=yes; shift 1;;
	--) shift; break;;
	esac
done

[ "${#}" = 0 -a "$Update" != yes -a "$Update" != YES ] && {
	Usage
	exit 1
}

lockf=/tmp/distroDB.w.lock
trap "sigproc" SIGINT SIGTERM SIGHUP SIGQUIT
sigproc() {
	rm -f $lockf
	exit
}

UpdateDB() {
	local arch=$ARCH
	local deepup=

	[ "$1" = YES ] && deepup=1
	cd $dbRoot
	rm -f .curl* #remove old version db files

	rpm -q procmail >/dev/null || yum install -y procmail &>/dev/null
	lockfile /tmp/distroDB.w.lock || return 0
	#Update distro list
	for family in 8 7 6 5; do
		distro-list.sh -f $family -t all
	done >distro.list.tmp
	if [ ! -f distro.list ]; then
		touch distro.list
	fi

	diff -pNu distro.list distro.list.tmp >distro.list.diff
	\cp distro.list.tmp distro.list
	sed -n '/^+[^+]/{s/^+//; p}' distro.list.diff >distro.list.up
	[ -n "$deepup" ] && \cp distro.list distro.list.up

	#Update pkg list
	while read distro; do
		arch=$ARCH
		urls=$(bkr distro-trees-list --limit=1 --name "$distro" --arch=${arch:-x86_64} | grep http:// | awk '{print $3 "Packages"}')
		cachefile=.Curl.${distro// /_}.${arch}.cache

		[[ -f $cachefile && ! $cachefile =~ latest ]] && continue

		for url in $urls; do
			if curl -sf -k -L -u: $url >$cachefile.tmp; then
				[[ $distro = RHEL-8* ]] && {
					curl -sf -k -L -u: ${url/BaseOS/AppStream} >>$cachefile.tmp  2>/dev/null
				}
				break
			else
				echo "[warn] get pkgs of '$distro' fail: $url" >&2
			fi
		done

		if grep -q 'kernel-' $cachefile.tmp; then  #fixme
			echo "# {$url}" >$cachefile
			sed -nr '/^.*href="([^"]+).rpm".*$/{s//\1/; p}' $cachefile.tmp >>$cachefile
			#awk -F'[<>]' '/alt=/{printf("%s\n", $5)}' $cachefile.tmp >>$cachefile
			# enable other user can modify these cachefile
			chmod a+w $cachefile 2>/dev/null
		fi
		\rm -f $cachefile.tmp
	done < distro.list.up
	rm -f /tmp/distroDB.w.lock
}

ARCH=${ARCH:-x86_64}
case "$ARCH" in  x86_64|i386|ppc64*|s390x) :;;  *) ARCH=x86_64;;  esac
dbRoot=/var/cache/distroInfoDB

if [ "$Update" = yes -o "$Update" = YES ]; then 
	[ `id -u` != 0 ] && {
		echo "{Warn} Update database need root. try 'sudo /usr/local/bin/vershow --updatedb'" >&2
		exit 1
	}
	egrep -q "/usr/local/bin/vershow" /etc/crontab || echo "  10 05 *  *  * root       /usr/local/bin/vershow -uu;" >>/etc/crontab
	mkdir -p $dbRoot
	echo "{Info} $(test $Update = YES && echo Deep\ )Updating distro database..."
	UpdateDB $Update
else
	[ ! -d $dbRoot -o ! -f $dbRoot/distro.list ] && {
		echo "{Warn} distro database is nil. try 'sudo /usr/local/bin/vershow --updatedb' to create database first" >&2
		exit 1
	}
fi

[ -z "$1" ] && exit

cd $dbRoot
# do search
pkgPart=${1}
mydistro=${2}
mylist=$(egrep -i -- "$mydistro" distro.list)
while read distro; do
	cachefile=.Curl.${distro// /_}.${ARCH}.cache
	[ -f $cachefile ] || continue

	result=$(egrep -- "$pkgPart" $cachefile)
	[ $? = 0 ] && {
		[[ -z "$nocolor" ]] && echo -e "=> \033[1;34m$distro\033[0m" || echo -n "$distro -> "
		echo "$result"
	}
done <<<"$mylist"

if ! egrep -q "/usr/local/bin/vershow" /etc/crontab; then
	if [ `id -u` = 0 ]; then
		echo "  10 05 *  *  * root       /usr/local/bin/vershow -uu;" >>/etc/crontab
	else
		echo "{Notice} distro database auto update is disabled. try 'sudo /usr/local/bin/vershow --updatedb'" >&2
		exit 0
	fi
fi
