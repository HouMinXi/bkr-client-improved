#!/bin/bash
#ref: https://readthedocs.org/projects/restraint/downloads/pdf/latest/#section.1.9

. /usr/share/restraint/plugins/helpers
rstrnt_info "*** Running Plugin: $0 @$PWD"

_targetdir=/mnt/tests
_downloaddir=/mnt/download
_logf=/tmp/${0##*/}.log

_install_taskname2url() {
	local _cmd=taskname2url.py
	local _pycurl=python3-pycurl
	[[ $(rpm -E %rhel) = 7 ]] && {
		yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm &>>${_logf}
		_pycurl=python36-pycurl
	}
	yum install -y python3 $_pycurl bzip2 gzip zip xz &>>${_logf}
	command -v $_cmd || {
		_url=http://download.devel.redhat.com/qa/rhts/lookaside/bkr-client-improved/utils/taskname2url.py
		curl -Ls -o /usr/bin/${_cmd} ${_url}
		chmod +x /usr/bin/${_cmd}
		_dburl=http://download.devel.redhat.com/qa/rhts/lookaside/bkr-client-improved/conf/fetch-url.ini
		curl -Ls -o /etc/${_dburl##*/} ${_dburl}
	}
}

_get_task_requires() {
	local _fpath=$1
	pushd "$_fpath" &>/dev/null
	{ test -f Makefile && sed -nr '/^.*"(Rhts|Repo)?Requires:\s*([^"]+)".*$/{s//\2/;s/\s+/\n/g;p}' Makefile |
		sort -u | awk '
		match($0,/^library\(([^\/]+)\/(.+)\)$/,M) { print(M[1] "/Library/" M[2]) }
		match($0,/^test\(\/?(.+)\)$/,M) { print(M[1]) }
		match($0,/^kernel-kernel-(.+)$/,M) { print("kernel/" gensub("-","?","g",M[1])) }
		match($0,/^nfs-utils-nfs-utils-(.+)$/,M) { print("nfs-utils/" gensub("-","?","g",M[1])) }
		match($0,/^\//) { print(gensub("^/","",1)) }
		match($0,/^(.+)-CoreOS-(.+)$/,M) { m1=M[1]; m2=M[2]; sub(m1 "-","",m2); print(m1 "/" gensub("-","?","g",m2)) }
		'

	  component=$(awk -F'[=/ ]+' '/^name/{print $2}' metadata);
	  awk -v head=$component -F'[=;]' '/^(task|repo)Requires/ {
		for (i=2;i<=NF;i++) {
			if ($i ~ "^/") print substr($i,2); else print head"/"$i
		}
	  }' metadata;
	} 2>/dev/null | sort -u | xargs
	popd &>/dev/null
}

_get_package_requires() {
	local _fpath=$1
	pushd "$_fpath" &>/dev/null
	{ sed -nr '/^.*"Requires:\s*([^"()]+)" .*$/{s//\1/;s/ +/\n/g;p}' $_fpath/Makefile |
		grep -E -v '^kernel-kernel-|^(.+)-CoreOS-\1-|^/';
	} 2>/dev/null | sort -u | xargs
	popd &>/dev/null
}

_install_task() {
	local _task=$1 fpath= local_fpath=
	_task=${_task#CoreOS/}; _task=${_task#/}
	read taskrepo _rpath <<<"${_task/\// }"
	uri=$(taskname2url.py /$_task $taskOpts $repoOpts)
	[[ -z "$uri" ]] && continue
	read url rpath <<<"${uri/\#/ }"
	repopath=$_targetdir/$taskrepo
	fpath="$repopath/$rpath"

	#if there is ? in rpath
	if [[ "$rpath" = *\?* && -d $repopath ]]; then
		if rfpath=$(find $repopath | grep -E "$repopath/${rpath//\?/.}$"); then
			fpath=${rfpath%/}
			if [[ -f "$fpath/.url" ]]; then
				return 0
			fi
			rpath=${fpath#${repopath}/}
		fi
	fi

	#skip if required task in same repo and has been there
	if [[ "$url" = "$URL" && "$taskrepo" = "$TASK_REPO" ]]; then
		local_fpath="$REPO_PATH/$rpath"
		if [[ -d "$local_fpath" ]]; then
			if [[ ! -f "$fpath/.url" ]]; then
				rm -rf ${fpath}
				mkdir -p "${fpath%/*}"
				ln -s $local_fpath $fpath 2>/dev/null
				echo -n "$url" >$local_fpath/.url
			fi
			return 0
		fi
	fi

	if [[ -d $fpath ]]; then
		if [[ -n "OVER_WRITE_RPM" && ! -f "$fpath/.url" ]]; then
			rm -rf "$fpath"
		else
			return 1
		fi
	fi

	echo -e "\n{debug} install task require: /$_task -> $fpath" >&2
	file=${url##*/}
	filepath=$_downloaddir/taskrepo/$file
	#download the archive of the repo //doesn't support git protocol
	if ! test -f ${filepath}; then
		mkdir -p ${filepath%/*}
		curl -k -Ls ${url} -o ${filepath}
	fi
	if test -f ${filepath}; then
		mkdir -p $repopath
		filetype=$(file -b ${filepath})
		if [[ "$filetype" = Zip* ]]; then
			inpath=$(unzip -Z1 $filepath| grep -E "^[^/]+/${rpath//\?/.}/$"|sed -n '1{s@/$@@;p;q}')
			[[ -z "$inpath" ]] && { echo "{error} no path '$rpath' found in $file" >&2; return 2; }
			unzip $filepath "${inpath}/*" -d $_targetdir &>/dev/null
			_topdir=${inpath%%/*}
			[[ "${_topdir}" != "$taskrepo" ]] && mv $_targetdir/${_topdir} $repopath
		else
			case "$filetype" in
				(gzip*) xtype=z;;
				(bzip2*) xtype=j;;
				(XY*) xtype=J;;
				(*) xtype=a;;
			esac
			#topdir=$(tar taf ${filepath} | head -1 | sed -e 's@/.*@@')
			#tar -C $repopath -${xtype}xf ${filepath} ${topdir}/$rpath --strip-components=1
			inpath=$(tar taf ${filepath} | grep -E "^[^/]+/${rpath//\?/.}/$"|sed -n '1{s@/$@@;p;q}')
			[[ -z "$inpath" ]] && { echo "{error} no path '$rpath' found in $file" >&2; return 2; }
			tar -C $repopath -${xtype}xf ${filepath} $inpath --strip-components=1
		fi
		rpath=${inpath#*/}; rpath=${rpath%/};
		fpath="$repopath/$rpath";
		[[ -n "$local_fpath" ]] && local_fpath="$REPO_PATH/$rpath"
		[[ -n "$local_fpath" && ! -d "$local_fpath" ]] && {
			mkdir -p "${local_fpath%/*}"
			ln -sf "$fpath" "$local_fpath"
		}
	else
		echo "{error} download $url to ${filepath} fail" >&2
		return 2
	fi
	echo -n "$url" >$fpath/.url
	echo "{debug} install pkg dependencies of /$_task($fpath)" >&2
	pkgs=$(_get_package_requires $fpath)
	[[ -n "$pkgs" ]] && {
		echo "{run} yum install -y $pkgs &>>$_logf" >&2
		yum --setopt=strict=0 install -y $pkgs &>>$_logf
	}
	echo $fpath
}

_install_task_requires() {
	local _fpath=$1 _task=
	local require_tasks=$(_get_task_requires $_fpath)
	for _task in $require_tasks; do
		__fpath=$(_install_task "$_task")
		[[ -d "$__fpath" ]] && _install_task_requires "$__fpath"
	done
}

if [[ -z "$RSTRNT_NOPLUGINS" ]]; then
	CASE_DIR=$PWD
	TASK="${TESTNAME:-$RSTRNT_TASKNAME}"
	_TASK=${TASK#/}; _TASK=${_TASK#CoreOS/};
	read TASK_REPO _RPATH <<<"${_TASK/\// }"

	echo "{debug} current dir: $CASE_DIR" >&2
	[[ -n "$REPO_URLS" ]] && echo "{debug} task urls: $REPO_URLS" >&2
	[[ -n "$TASK_URIS" ]] && echo "{debug} task urls: $TASK_URIS" >&2
	for repourl in $REPO_URLS; do [[ "$repourl" != *,* ]] && continue; repoOpts+="-repo=$repourl "; done
	for taskuri in $TASK_URIS; do [[ "$taskurl" != *,* ]] && continue; taskOpts+="-task=$taskuri "; done

	#install taskname2url.py and db config
	_install_taskname2url

	#get current task's repo and repopath
	URI=$(taskname2url.py $TASK $taskOpts $repoOpts)
	read URL RPATH <<<"${URI/\#/ }"
	REPO_PATH=${CASE_DIR%/$RPATH}

	#install task requires
	_install_task_requires .

	echo -e "{debug} leaving restraint plugin $0\n" >&2
fi

exec "$@"
